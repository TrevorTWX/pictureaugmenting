//Enter the file path with '/' at the end
//The picture files should all be in PNG file or JPG file 
//(please change the extended file name in the program for different format)
//Pictures should be named in Integer from 0-N. The program will ask for N. 

package AugmentingImage;

import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

import javax.imageio.ImageIO;

public class cutImage {
 
 static Random random = new Random();
 
 public static void main(String[] args) throws IOException{
     //scan input
     Scanner reader = new Scanner(System.in);
     System.out.println("Enter the number of last image file (start with 1): ");
     int lastNum = reader.nextInt(); 
     System.out.println("Enter the number of images generated by each change for each picture[flip will be random]: ");
     int changeNum = reader.nextInt();
     System.out.println("enter the source folder of images: ");
     String inputSource = reader.next();
     System.out.println("enter the target folder of images: ");
     String inputTarget = reader.next();
     reader.close();
     //scanner closed
 
     String sourcePath;
     String targetPath;
     String result;
     for(int j=0; j<changeNum; j++){
         for (int i=1; i<=lastNum; i++){
             sourcePath = inputSource + i + ".jpg"; //change the extended file name here
             targetPath = inputTarget + i;
             if(random.nextBoolean() == true) initialFlip(sourcePath, targetPath);
             targetPath = inputTarget + i + "picture" + "-" + j + "change" + "-zoom";
             result = cutImage(sourcePath, targetPath);
             System.out.println(result + " zoom " + i + " " + j + "times");
             targetPath = inputTarget + i + "picture" + "-" + j + "change" + "-rotate";
             result = rotateImage(sourcePath, targetPath);
             System.out.println(result + " rotate " + i + " " + j + "times");
         }
     }
 
 }
 
 public static String cutImage(String sourcePath,String targetPath) throws IOException{ 
      File imageFile = new File(sourcePath); 
      if(!imageFile.exists()){ 
          throw new IOException("Not found the images:"+sourcePath); 
      } 
      if(targetPath==null || targetPath.isEmpty()) targetPath = sourcePath; 
      String format = sourcePath.substring(sourcePath.lastIndexOf(".")+1,sourcePath.length()); 
      BufferedImage image = ImageIO.read(imageFile); 
      int originalWidth = image.getWidth();
      int originalHeight = image.getHeight();
      int x = originalWidth/2;
      int y = originalHeight/2;
      int width = random.nextInt(originalWidth-200) + 100;
      int height = random.nextInt(originalHeight-200) + 100;
      x = x - width/2;
      y = y - height/2;
      image = image.getSubimage(x, y, width, height); 
      ImageIO.write(image, format, new File(targetPath + ".jpg")); 
      if(random.nextBoolean() == true) flipImage(image, targetPath, format);
      return targetPath; 
 } 
 
 public static String rotateImage(String sourcePath, String targetPath) throws IOException{ 
 
     File imageFile = new File(sourcePath); 
     if(!imageFile.exists()){ 
         throw new IOException("Not found the images:"+sourcePath); 
     } 
     if(targetPath==null || targetPath.isEmpty()) targetPath = sourcePath; 
     String format = sourcePath.substring(sourcePath.lastIndexOf(".")+1,sourcePath.length()); 
     BufferedImage bufferedimage = ImageIO.read(imageFile);
     int degree = random.nextInt(359);
 
     int w= bufferedimage.getWidth();// get the width
     int h= bufferedimage.getHeight();// get the height 
     int type= bufferedimage.getColorModel().getTransparency();// get transparancy 
     BufferedImage img;// empty picture
     Graphics2D graphics2d;// new pen
     (graphics2d= (img= new BufferedImage(w, h, type)) 
        .createGraphics()).setRenderingHint( 
        RenderingHints.KEY_INTERPOLATION, 
        RenderingHints.VALUE_INTERPOLATION_BILINEAR); 
        graphics2d.rotate(Math.toRadians(degree), w / 2, h / 2);// 旋转，degree是整型，度数，比如垂直90度。 
        graphics2d.drawImage(bufferedimage, 0, 0, null);// 从bufferedimagecopy图片至img，0,0是img的坐标。 
        graphics2d.dispose(); 
     ImageIO.write(img, format, new File(targetPath + ".jpg"));
     if(random.nextBoolean() == true) flipImage(img, targetPath, format);
     return targetPath;// 返回复制好的图片的路径，原图片依然没有变，没有旋转，下次还可以使用。
 }
 
 public static void initialFlip(String sourcePath, String targetPath) throws IOException{
     File imageFile = new File(sourcePath); 
     if(!imageFile.exists()){ 
         throw new IOException("Not found the images:"+sourcePath); 
     } 
     if(targetPath==null || targetPath.isEmpty()) targetPath = sourcePath; 
     String format = sourcePath.substring(sourcePath.lastIndexOf(".")+1,sourcePath.length()); 
     BufferedImage img = ImageIO.read(imageFile);
     String result = flipImage(img, targetPath, format);
     System.out.println(result);
 }
 
 public static String flipImage(BufferedImage bufferedimage, String targetPath, String format) throws IOException { 
     int w = bufferedimage.getWidth(); 
     int h = bufferedimage.getHeight(); 
     BufferedImage img; 
     Graphics2D graphics2d; 
     (graphics2d = (img = new BufferedImage(w, h, bufferedimage 
         .getColorModel().getTransparency())).createGraphics()) 
         .drawImage(bufferedimage, 0, 0, w, h, w, 0, 0, h, null); 
     graphics2d.dispose(); 
     ImageIO.write(img, format, new File(targetPath + "-flip.jpg"));
     return targetPath+"-flip"; 
 } 
}
